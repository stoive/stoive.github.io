<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>JS to BMP</title>
		<script>
// toBytes
// A random helper that really deserves to be replaced now
Number.prototype.toBytes = function(len, littleEndian) {
	var x = this;
	var bytes = [];
	while (x > 0) {
		bytes.push(
			(x % 256)
		);
		x = Math.floor(x / 256);
	}
	while (bytes.length < len) bytes.push(0);
	if (!littleEndian) bytes.reverse();
	return bytes;
};

// unsure of whether there's a built-in way to convert characters to encoded data,
// but since we only need ascii values for now, no big deal
DataView.prototype.getString = function(byteOffset, len, encoding) {
	if (!encoding || encoding.toLowerCase() == "ascii") {
		var chars = [];
		for (var i = 0; i < len; i++) {
			chars[i] = String.fromCharCode(this.getUint8(byteOffset + i));
		}
		return String.fromCharCode.apply(null, chars);
	}
	else {
		throw "unknown encoding";
	}
};

DataView.prototype.setString = function (byteOffset, value, encoding) {
	if (!encoding || encoding.toLowerCase() == "ascii") {
		for (var i = 0; i < value.length; i++) {
			this.setUint8(byteOffset + i, value.charCodeAt(i));
		}
	}
	else {
		throw "unknown encoding";
	}
};

// Allows a non-integer offset to specify the location where value is saved.
// doesn't handle the value spilling between bytes. Could be better replaced with
// setUint1/2/4
DataView.prototype.setBits = function (offset, value) {
	var byteOffset = Math.floor(offset);
	this.setUint8(byteOffset, this.getUint8(byteOffset) + value * Math.pow(2, 8 * (offset % 1)))
};
DataView.prototype.getBits = function (offset) {
	var byteOffset = Math.floor(offset);
	var bitMask = Math.pow(2, 8 * (offset % 1)) - 1;
	return (this.getUint8(byteOffset) & bitMask) / (0xff % bitMask + 1);
};

DataView.prototype.setUint24 = function (byteOffset, value, littleEndian) {
	var bytes = value.toBytes(3, littleEndian);
	this.setUint8(byteOffset, bytes[0]);
	this.setUint8(byteOffset + 1, bytes[1]);
	this.setUint8(byteOffset + 2, bytes[2]);
};

DataView.prototype.getUint24 = function (byteOffset, littleEndian) {
	if (littleEndian) {
		return this.getUint8(byteOffset) + this.getUint8(byteOffset + 1) * 0x100 + this.getUint8(byteOffset + 2) * 0x10000;
	}
	else {
		return this.getUint8(byteOffset, true) * 0x10000 + this.getUint8(byteOffset + 1, true) * 0x100 + this.getUint8(byteOffset + 2, true);
	}
};

function BmpFile(width, height, colourDepth) {
	this.bmpHeader = new BmpHeader();
	this.dibHeader = new DibHeader();
	this.imageData = new PixelData(width, height, colourDepth);
	if (colourDepth <= 8) this.palette = new ColourTable();
	
	this.dibHeader.imageWidth = width;
	this.dibHeader.imageHeight = height;
	this.dibHeader.colourDepth = colourDepth;
	this.dibHeader.imageDataBytes = this.imageData.byteLength
}
BmpFile.prototype = {
	bmpHeader: null,
	dibHeader: null,
	palette: null,
	imageData: null,
	get bytes() {
		this.bmpHeader.imageDataOffset = 
			this.bmpHeader.bytes.buffer.byteLength +
			this.dibHeader.bytes.buffer.byteLength +
			(this.palette ? this.palette.byteLength : 0);
	
		this.bmpHeader.fileSize = 
	 		this.bmpHeader.imageDataOffset +
			this.imageData.byteLength;

		var dv = new DataView(new ArrayBuffer(this.bmpHeader.fileSize));
		var bytesWritten = 0;

		var i = -1;
		while (++i < this.bmpHeader.bytes.buffer.byteLength) {
			dv.setUint8(bytesWritten + i, this.bmpHeader.bytes.getUint8(i))
		}
		bytesWritten += this.bmpHeader.bytes.buffer.byteLength;

		i = -1;
		while (++i < this.dibHeader.bytes.buffer.byteLength) {
			dv.setUint8(bytesWritten + i, this.dibHeader.bytes.getUint8(i));
		}
		bytesWritten += this.dibHeader.bytes.buffer.byteLength;		

		if (this.palette) {
			i = -1;
			var paletteBytes = this.palette.bytes;
			while (++i < paletteBytes.buffer.byteLength) {
				dv.setUint8(bytesWritten + i, paletteBytes.getUint8(i));
			}
			bytesWritten += paletteBytes.buffer.byteLength;
		}

		i = -1;
		var imageDataBytes = this.imageData.bytes;
		while (++i < imageDataBytes.buffer.byteLength) {
			dv.setUint8(bytesWritten + i, imageDataBytes.getUint8(i));
		}
		return dv;
	}
};

// Implements BITMAPFILEHEADER
function BmpHeader() {
	this.bytes = new DataView(new ArrayBuffer(14));
	this.magicNumber = "BM";
}
BmpHeader.prototype = {
	bytes: null,
	get magicNumber() {
		return this.bytes.getString(0,2);
	},
	set magicNumber(value) {
		if (value.length == 2)
			this.bytes.setString(0,value);
		else
			throw "magicNumber must have length of exactly 2 characters"
	},
	get fileSize() {
		return this.bytes.getUint32(2, true);
	},
	set fileSize(value) {
		this.bytes.setUint32(2, value, true);
	},
	get reserved1() {
		return this.bytes.getUint16(6, true);
	},
	set reserved1(value) {
		this.bytes.setUint16(6, value, true);
	},
	get reserved2() {
		return this.bytes.getUint16(8, true);
	},
	set reserved2(value) {
		this.bytes.setUint16(8, value, true);
	},
	get imageDataOffset() {
		return this.bytes.getUint32(10, true);
	},
	set imageDataOffset(value) {
		this.bytes.setUint32(10, value, true);
	}
};
BmpHeader.prototype.constructor = BmpHeader;

// implementation of BITMAPINFOHEADER
function DibHeader() {
	this.bytes = new DataView(new ArrayBuffer(40));
	this.headerSize = 40;
	this.horizontalPixelsPerMetre = 2835;
	this.verticalPixelsPerMetre = 2835,
	this.colourPlanes = 1;
	this.colourDepth = 1;
}
DibHeader.prototype = {
	bytes: null,
	get headerSize() {
		return this.bytes.getUint32(0, true);
	},
	set headerSize(value) {
		this.bytes.setUint32(0, value, true);
	},
	get imageWidth() {
		return this.bytes.getUint32(4, true);
	},
	set imageWidth(value) {
		this.bytes.setUint32(4, value, true);
	},
	get imageHeight() {
		return this.bytes.getUint32(8, true);
	},
	set imageHeight(value) {
		this.bytes.setUint32(8, value, true);
	},
	get colourPlanes() {
		return this.bytes.getUint16(12, true);
	},
	set colourPlanes(value) {
		this.bytes.setUint16(12, value, true);
	},
	get colourDepth() {
		return this.bytes.getUint16(14, true);
	},
	set colourDepth(value) {
		this.bytes.setUint16(14, value, true);
	},
	get compressionMethod() {
		return this.bytes.getUint32(16, true);
	},
	set compressionMethod(value) {
		this.bytes.setUint32(16, value, true);
	},
	get imageDataBytes() {
		return this.bytes.getUint32(20, true);
	},
	set imageDataBytes(value) {
		this.bytes.setUint32(20, value, true);
	},
	get horizontalPixelsPerMetre() {
		return this.bytes.getUint32(24, true);
	},
	set horizontalPixelsPerMetre(value) {
		this.bytes.setUint32(24, value, true);
	},
	get verticalPixelsPerMetre() {
		return this.bytes.getUint32(28, true);
	},
	set verticalPixelsPerMetre(value) {
		this.bytes.setUint32(28, value, true);
	},
	get paletteSize() {
		return this.bytes.getUint32(32, true);
	},
	set paletteSize(value) {
		this.bytes.setUint32(32, value, true);
	},
	get importantColours() {
		return this.bytes.getUint32(36, true);
	},
	set importantColours(value) {
		this.bytes.setUint32(36, value, true);
	}
};
DibHeader.prototype.constructor = DibHeader;

// Gives a RGBA value according to a specified length and mask
function RGBAXColourFactory(bits, redMask, greenMask, blueMask, alphaMask) {
	this.bits = bits;
	this.redMask = redMask;
	this.greenMask = greenMask;
	this.blueMask = blueMask;
	this.alphaMask = alphaMask;
}
RGBAXColourFactory.prototype = {
	bits: 0,
	redMask: 0x0,
	greenMask: 0x0,
	blueMask: 0x0,
	alphaMask: 0x0,
	createColour: function(red, green, blue, alpha) {
		var val = 0x0;
		val += red * (Math.pow(2, this.bits) % this.redMask);
		val += green * (Math.pow(2, this.bits) % this.greenMask);
		val += blue * (Math.pow(2, this.bits) % this.blueMask);
		if (this.alphaMask) val += alpha * (Math.pow(2,this.bits) % this.alphaMask);
		return val;
	}
};

// BITMAPINFOHEADER only supports 24 bit colour for non-indexed bitmaps. Add as appropriate
// Possibly extend RGBAXColourFactory to have a bytes property to output extended portion of header
// which is necessary for DIB headers not implemented here.
// The identifiers here are descriptive, assign them short names for the sake of your carpel tunnel syndrome
// e.g. var cf = RGBAXColourFactories.TwentyFourBitColourFactory; cf.c = cf.createColour; //  cf.c(0,255,127);
var RGBAXColourFactories = {
	TwentyFourBitColourFactory: new RGBAXColourFactory(24,0xff,0xff00, 0xff0000),
	RGBQUADColourFactory: new RGBAXColourFactory(32, 0xff00, 0xff0000, 0xff000000)
};

// ColourTable is an array of RGBQUAD colour values
function ColourTable() {}
ColourTable.prototype = [];
ColourTable.prototype.constructor = ColourTable;
Object.defineProperty(ColourTable.prototype, "bytes",{
	get: function() {
		var a = new DataView(new ArrayBuffer(this.byteLength))
		var i = 0;
		while (i < this.length) {
			a.setUint32(i * 4, this[i], false);
			++i;
		}
		return a;
	},
	enumerable: false,
	configurable: true
});
Object.defineProperty(ColourTable.prototype, "getIndex",{
	value: function(colour) {
		return this.indexOf(colour);
	},
	writable: true,
	enumerable: false,
	configurable: true
});
Object.defineProperty(ColourTable.prototype, "byteLength",{
	get: function() {
		return this.length * 4;
	},
	enumerable: false,
	configurable: true
});

// There needs to be added default colour tables for 2, 4, 8 bit bitmaps
ColourTables = {
	get MonochromeColourTable() {
		var colourTable = new ColourTable();	
		colourTable.push(RGBAXColourFactories.RGBQUADColourFactory.createColour(0xff,0xff,0xff,0x00));
		colourTable.push(RGBAXColourFactories.RGBQUADColourFactory.createColour(0x00,0x00,0x00,0x00));
		return colourTable;
	}
};

// e.g.
// pixelData[0][1] = RGBAXColourFactories.TwentyFourBitColourFactory.createColour(34,43,2,0);
// pixelData[23][34] = colourTable[1];
function PixelData(width, height, colourDepth) {
	this.width = width;
	this.height = height;
	this.colourDepth = colourDepth;

	// zero out array
	// creates a new row every time instead of referencing
	var zeroRow = function() { row = []; for (var x = 0; x < width; x++) row[x] = 0; return row};
	for (var y = 0; y < height; y++) this.push(zeroRow());
}
PixelData.prototype = [];
PixelData.prototype.constructor = PixelData;
Object.defineProperty(PixelData.prototype, "width", {
	value: 0,
	writable: true,
	enumerable: false,
	configurable: true
});
Object.defineProperty(PixelData.prototype, "height", {
	value: 0,
	writable: true,
	enumerable: false,
	configurable: true
});
Object.defineProperty(PixelData.prototype, "colourDepth", {
	value: 0,
	writable: true,
	enumerable: false,
	configurable: true
});
Object.defineProperty(PixelData.prototype, "bytesWide", {
	get: function() {
		return Math.ceil(((this.colourDepth / 8) * this.width) / 4) * 4;
	},
	enumerable: false,
	configurable: true
});
Object.defineProperty(PixelData.prototype, "byteLength", {
	get: function() {
		return this.bytesWide * this.height;
	},
	enumerable: false,
	configurable: true
});
Object.defineProperty(PixelData.prototype, "bytes",{
	get: function() {
		var setInt;
		var getInt;
		var accessorSize;
		if (this.colourDepth <= 4) {
			var self = this;
			// currying the setBits function to permanently set len parameter
			// thus creating setUint4, setUint2, setUint1, setUint'self.colourDepth' equivalents
			// where offset may be a fraction of a byte
			setInt = DataView.prototype.setBits;
			getInt = DataView.prototype.getBits;
			accessorSize = 8;
		}
		if (this.colourDepth == 8) {
			setInt = DataView.prototype.setUint8;
			getInt = DataView.prototype.getUint8;
			accessorSize = 8;
		}
		else if (this.colourDepth == 16) {
			setInt = DataView.prototype.setUint16;
			getInt = DataView.prototype.getUint16;
			accessorSize = 16;
		}
		else if (this.colourDepth == 24) {
			setInt = DataView.prototype.setUint24;
			getInt = DataView.prototype.getUint24;
			accessorSize = 24;
		}
		else if (this.colourDepth == 32) {
			setInt = DataView.prototype.setUint32;
			getInt = DataView.prototype.getUint32;
			accessorSize = 32;
		}

		var a = new DataView(new ArrayBuffer(this.byteLength));
		var i = 0;
		for (var y = this.height - 1; y >= 0; y--) {
			for (var x = 0; x < this.width; x++) {
				// calculate the byte index of a pixel coordinate
				setInt.call(a, Math.floor(i) + (1 - i % 1 - this.colourDepth / accessorSize), this[y][x]);
				i += this.colourDepth / 8;
			}
			i = this.bytesWide * (this.height - y);
		}
		
		return a;
	},
	enumerable: false,
	configurable: true
});
//]]>
		</script>
	</head>
	<body>
		<h1>JS to BMP</h1>
		<p><em>This requires at least <a href="http://tools.google.com/dlpage/chromesxs">Google Chrome v10</a></em></p>
		<p>Given a rectangular grid of 0s and 1s:</p>
		<textarea id="inputarea" style="width: 100%; height: 200px;"></textarea>
		<br />
		<p>Hit go to parse this into a BMP file:</p>
		<input type="button" id="launchButton" value="Go" />
		<br />
		<p>Which will be spat out as a Data URI:</p>
		<textarea id="outputarea" style="width: 100%; height: 200px;"></textarea>
		<br />
		<p>And a downloadable BMP image:</p>
		<img src="" id="outputimage" />
		<h2>So what&apos;s going on?</h2>
		<p>View the source, dammit! Implementations of all the BMP file format components have been implemented in OO-like Javascript:</p>
		<ul>
			<li>BITMAPFILEHEADER</li>
			<li>BITMAPINFOHEADER (but not the DIB headers which allow 16-bit and 32-bit colour)</li>
			<li>RGBQUAD colour palettes</li>
			<li>RGBAX-defined colour factories</li>
			<li>Pixel array of image data, correctly padded</li>
		</ul>
		<p>Through the interface above, you can quickly define a monochrome bitmap image. Since there's no particularly fun way of entering 24-bit colour data in some kind of messed-up ASCII art, you'll have to open up the console in Google Chrome 10 at a minimum and play around there. An example:</p>
		<pre>
var bmp = new BmpFile(10, 10, 24);
row = [];
var cf = RGBAXColourFactories.TwentyFourBitColourFactory;
cf.c = cf.createColour;
row.push(cf.c(0x00, 0xff, 0xff));
row.push(cf.c(0xff, 0x00, 0xff));
row.push(cf.c(0xff, 0x00, 0xff));
row.push(cf.c(0xff, 0x00, 0xff));
row.push(cf.c(0xff, 0xaa, 0xaa));
row.push(cf.c(0xff, 0xaa, 0xaa));
row.push(cf.c(0xff, 0xff, 0xaa));
row.push(cf.c(0xbb, 0xee, 0x11));
row.push(cf.c(0xff, 0xff, 0x11));
row.push(cf.c(0xff, 0x11, 0xff));
bmp.imageData[0] = row;
bmp.imageData[1] = row;
bmp.imageData[2] = row;
bmp.imageData[3] = row;
bmp.imageData[4] = row;
bmp.imageData[5] = row;
bmp.imageData[6] = row;
bmp.imageData[7] = row;
bmp.imageData[8] = row;
bmp.imageData[9] = row;

var bytes = bmp.bytes;
var oa = document.getElementById(&#39;outputarea&#39;);
oa.value = &quot;data:image/bmp,&quot;
for (var i = 0; i &lt; bytes.byteLength; i++) {
	var byte = bytes.getUint8(i).toString(16);
	oa.value += &quot;%&quot; + (byte.length == 1 ? &quot;0&quot; : &quot;&quot;) + byte;
}
document.getElementById(&#39;outputimage&#39;).src = oa.value;
		</pre>
		<p>This was an excercise in learning about the following new JavaScript technologies:
		<ul>
			<li>Data URI Schema</li>
			<li>Typed Arrays</li>
			<li>defineProperty</li>
			<li>File Reader API (coming soon, though it may be easier to just draw it to a canvas then read off)</li>
			<li>File Writer API (I was unable to write a Data URI from a Blob. Hmph.)</li>
		</ul>
		<p>Oh, I should probably mention... this has only been tested in Chrome Canary Build v10.0.634.0 - YMMV.</p>
		<p> - Steven Thurlow</p>
		<script>

document.getElementById('launchButton').addEventListener('click', function(e) {
	var ia = document.getElementById('inputarea');
	var rows = ia.value.split('\n');
	var height = rows.length;
	var width = 0;
	for (var i in rows) {
		if (rows[i].length > width) width = rows[i].length;
	}
	
	var bmp = new BmpFile(width, height, 1);
	bmp.palette = ColourTables.MonochromeColourTable;

	for (var y = 0; y < height; y++) {
		bmp.imageData[y] = [];
		for (var x = 0; x < width; x++) {
			bmp.imageData[y][x] = parseInt(rows[y].charAt(x));
		}
	}

	var bytes = bmp.bytes;
	var oa = document.getElementById('outputarea');
	oa.value = "data:image/bmp,"
	for (var i = 0; i < bytes.byteLength; i++) {
		var byte = bytes.getUint8(i).toString(16);
		oa.value += "%" + (byte.length == 1 ? "0" : "") + byte;
	}
	document.getElementById('outputimage').src = oa.value;

}, false);

/*
var builder = new BlobBuilder();
builder.append(bytes.buffer);
var blob = builder.getBlob("image/bmp");
var reader = new FileReader();
reader.onload = function(e) {
	console.log(e);
	if (reader.readyState == reader.DONE) {
		document.getElementById('outputimage').src = result;
	};
};
reader.onerror = function(e) {
	console.log(e);
};
reader.onabort = function(e) {
	console.log(e);
};
reader.readAsDataURL(blob);
*/
		</script>
	</body>
</html>
